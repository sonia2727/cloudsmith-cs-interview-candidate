name: Promote Python Package

on:
  repository_dispatch:
    types:
      - package_synchronized

env:
  CLOUDSMITH_NAMESPACE: ${{ vars.CLOUDSMITH_NAMESPACE }}
  CLOUDSMITH_STAGING_REPO: 'staging'
  CLOUDSMITH_PRODUCTION_REPO: 'production'
  CLOUDSMITH_SERVICE_SLUG: ${{ vars.CLOUDSMITH_SERVICE_SLUG }}
  PACKAGE_NAME: 'example_package'

permissions:
  id-token: write

jobs:
  promote:
    runs-on: ubuntu-latest

    steps:

      - name: Get OIDC token
        run: |
          # Generate the OIDC Token in GitHub Actions
          value=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" | jq '.value')
          # Make a POST request to the Cloudsmith OpenID endpoint to receive the JWT token
          token=$(curl -X POST -H "Content-Type: application/json" -d "{\"oidc_token\":$value, \"service_slug\":\"CLOUDSMITH_SERVICE_SLUG\"}" https://api.cloudsmith.io/openid/interview-sonia-sharma/ | jq -r '.token')
          # Validate the token by making a GET request to the Cloudsmith API
          curl --request GET --url https://api.cloudsmith.io/v1/user/self/ --header "X-Api-Key:Bearer $token" --header 'accept: application/json'        

      - name: Install Cloudsmith CLI
        uses: cloudsmith-io/cloudsmith-cli-action@v1.0.3
        with:
          oidc-namespace: ${{ env.CLOUDSMITH_NAMESPACE }}
          oidc-service-slug: ${{ env.CLOUDSMITH_SERVICE_SLUG }}

      - name: Get Information from Webhook
        run: |
          # Extract package identifier from the webhook payload
          PACKAGE_IDENTIFIER=$(echo "${{ github.event.client_payload.package_identifier }}" | jq -r '.identifier_perm')
          if [ -z "$PACKAGE_IDENTIFIER" ] || [ "$PACKAGE_IDENTIFIER" = "null" ]; then
            echo "Failed to extract package identifier from webhook payload"
            exit 1
          fi
          echo "Extracted Package Identifier: $PACKAGE_IDENTIFIER"
          echo "PACKAGE_IDENTIFIER=$PACKAGE_IDENTIFIER" >> $GITHUB_ENV

      - name: Tag Package with ready-for-production
        run: |
          cloudsmith tag add \
            ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$PACKAGE_IDENTIFIER \
            ready-for-production
          echo "Tagged package $PACKAGE_IDENTIFIER with 'ready-for-production'"

      - name: Get Packages with ready-for-production tag and Promote
        run: |
          PACKAGE_QUERY="tag:ready-for-production"
          echo "Searching for all packages with query: $PACKAGE_QUERY"
          
          PACKAGE_DATA=$(cloudsmith list package ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }} -q "$PACKAGE_QUERY" -F json)
          
          # Extract the identifier_perm using jq
          IDENTIFIERS=$(echo "$PACKAGE_DATA" | jq -r '.data[].identifier_perm')
          
          if [ -z "$IDENTIFIERS" ] ; then
            echo "Failed to find package with 'ready-for-production' tag"
            exit 1
          fi
          
          echo "Found package identifier: $IDENTIFIERS"
          
          # Promote package from staging to production
          for IDENTIFIER in $IDENTIFIERS; do
            echo "Promoting package: $IDENTIFIER"
            cloudsmith mv --yes \
              ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$IDENTIFIER \
              ${{ env.CLOUDSMITH_PRODUCTION_REPO }}
        shell: bash
